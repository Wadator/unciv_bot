#!/usr/bin/env python3
# unciv_notifier_prod.py
"""
Production-ready Unciv Telegram Notifier with multilingual support and persistent interval setting.
"""

import os
import asyncio
import logging
import json
import tempfile
import time
from datetime import datetime, timedelta
from typing import Dict, Optional, Any

import aiohttp
from aiohttp.client_exceptions import ClientError
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)
from dotenv import load_dotenv

# ---------------------------
# –ö–æ–Ω—Ñ—ñ–≥ / –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# ---------------------------
load_dotenv()

LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(level=LOG_LEVEL, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("unciv_notifier")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    logger.critical("TELEGRAM_TOKEN not set in environment variables! Exiting.")
    raise SystemExit("TELEGRAM_TOKEN required")

BASE_URL = os.getenv("UNCIV_BASE_URL", "https://uncivserver.xyz/jsons/")
STATE_FILE = os.getenv("STATE_FILE", "bot_state.json")
# –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (60) –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–µ, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É .env —Ç–∞ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É state_file
MONITOR_INTERVAL_SECONDS_DEFAULT = int(os.getenv("MONITOR_INTERVAL_SECONDS", "60")) 
REMINDER_SCHEDULE = [
    timedelta(minutes=10),
    timedelta(minutes=30),
    timedelta(hours=1),
]

ERROR_DEBOUNCE_SECONDS = 300  # 5 minutes

# ---------------------------
# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω (–≤ –ø–∞–º'—è—Ç—ñ)
# ---------------------------
state_lock = asyncio.Lock()

GAME_ID: Optional[str] = None
CURRENT_GAME_URL: Optional[str] = None
LAST_TURN_PLAYER: Optional[str] = None  # normalized uppercase
MAIN_CHAT_ID: Optional[int] = None
NOTIFY_PAUSED: bool = False
AVAILABLE_NATIONS: list[str] = []
PLAYER_LOGINS: Dict[str, str] = {}  # normalized -> @username
PLAYER_NOTIFICATION_STATE: Dict[str, Dict[str, Any]] = {}  # normalized -> state
ETAG_CACHE: Dict[str, str] = {}  # url -> etag

BOT_LANGUAGE: str = os.getenv("BOT_LANGUAGE", "en") # 'en' –∞–±–æ 'ua'

_last_error_time_by_chat: Dict[int, float] = {}

# ---------------------------
# 1. –°–õ–û–í–ù–ò–ö –ü–ï–†–ï–ö–õ–ê–î–Ü–í
# ---------------------------

TRANSLATIONS = {
    "en": {
        "welcome": "<b>üëã Welcome to Unciv Notifier!</b>\nUse /help for commands.",
        "help_text": (
            "<b>Unciv Notifier Commands</b>\n\n"
            "<b>/setgame &lt;Game_ID&gt;</b> - Set game ID and start monitoring.\n"
            "<b>/setinterval &lt;seconds&gt;</b> - Change monitoring interval (default 60s).\n"
            "<b>/subscribe &lt;Nation&gt; &lt;@username&gt;</b> - Subscribe for nation ping.\n"
            "<b>/unsubscribe &lt;@username&gt;</b> - Remove subscription by username.\n"
            "<b>/pause</b> - Toggle reminders pause.\n"
            "<b>/status</b> - Current status (game, turn, pause).\n"
            "<b>/list</b> - List all subscriptions.\n"
            "<b>/setlang &lt;en|ua&gt;</b> - Change bot language (Default: en).\n"
            "<b>/help</b> - This message.\n"
        ),
        "setgame_usage": "Please specify the Game ID. Format: /setgame <Game_ID>",
        "setgame_fail_fetch": "‚ùå Failed to fetch data for ID {game_id}.",
        "setgame_fail_connect": "‚ùå Failed to connect to server: {error}",
        "setgame_success": (
            "‚úÖ Monitoring established.\n<b>ID:</b> {game_id}\n<b>Nations:</b> {nations_list}\n"
            "Monitoring interval: {interval}s"
        ),
        "setgame_no_humans": "No human players found.",
        "setinterval_usage": "Specify interval in seconds. Example: /setinterval 120",
        "setinterval_success": "Monitoring interval set to {interval} seconds.",
        "subscribe_usage": "Format: /subscribe <Nation> @username",
        "subscribe_username_format": "Username must start with @.",
        "subscribe_nation_not_found": "Nation not found in the current game. Use /setgame to refresh the list.",
        "subscribe_success": "‚úÖ Subscription saved: {nation} -> {username}",
        "unsubscribe_usage": "Specify @username to remove subscription. Format: /unsubscribe @username",
        "unsubscribe_success": "‚úÖ Subscription removed: {username} (Nation: {nation})",
        "unsubscribe_not_found": "Login {username} not found in subscriptions.",
        "pause_on": "‚è∏Ô∏è Reminders paused.",
        "pause_off": "‚ñ∂Ô∏è Reminders resumed!",
        "pause_resumed_ping": " {login}, it's your turn (Nation {nation}).",
        "pause_resumed_no_ping": " Nation {nation}'s turn is still waiting.",
        "status_no_game": "‚ùó No game set. Use /setgame <Game_ID>.",
        "status_text": "<b>Status</b>\n<b>Game ID:</b> {game_id}\n<b>Notifications paused:</b> {paused}\n",
        "status_paused_yes": "Yes",
        "status_paused_no": "No",
        "status_current_player": "<b>Last/current player:</b> {nation} ({login})\n",
        "status_login_none": "(not subscribed)",
        "status_unknown_player": "<b>Last/current player:</b> unknown\n",
        "list_empty": "No subscriptions.",
        "list_title": "<b>Subscriptions:</b>",
        "setlang_usage": "Specify the language: /setlang en or /setlang ua",
        "setlang_success": "‚úÖ Language set to {lang_name} ({lang_code}).",
        "setlang_name_en": "English",
        "setlang_name_ua": "Ukrainian",
        "notify_main_ping": "üö® <b>{nation}</b>. It's your turn, {login}!",
        "notify_main_no_ping": "üö® <b>NEW TURN!</b> Nation <b>{nation}</b>!",
        "notify_reminder_ping": "üîî <b>REMINDER!</b> {login}, please take your turn. (Elapsed: {delay})",
        "notify_reminder_no_ping": "üîî <b>REMINDER!</b> Nation <b>{nation}</b> turn is waiting. (Elapsed: {delay})",
        "error_server_down": "‚ö†Ô∏è Cannot reach the game server. Notifications paused temporarily.",
    },
    "ua": {
        "welcome": "<b>üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Unciv Notifier!</b>\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è –∫–æ–º–∞–Ω–¥.",
        "help_text": (
            "<b>–ö–æ–º–∞–Ω–¥–∏ Unciv Notifier</b>\n\n"
            "<b>/setgame &lt;Game_ID&gt;</b> - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ID –≥—Ä–∏ —Ç–∞ –ø–æ—á–∞—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.\n"
            "<b>/setinterval &lt;seconds&gt;</b> - –ó–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 60s).\n"
            "<b>/subscribe &lt;–ù–∞—Ü—ñ—è&gt; &lt;@username&gt;</b> - –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—ñ–Ω–≥ –¥–ª—è –Ω–∞—Ü—ñ—ó.\n"
            "<b>/unsubscribe &lt;@username&gt;</b> - –í–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –∑–∞ –ª–æ–≥—ñ–Ω–æ–º.\n"
            "<b>/pause</b> - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –ø–∞—É–∑—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.\n"
            "<b>/status</b> - –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω (–≥—Ä–∞, —Ö—ñ–¥, –ø–∞—É–∑–∞).\n"
            "<b>/list</b> - –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –ø—ñ–¥–ø–∏—Å–æ–∫.\n"
            "<b>/setlang &lt;en|ua&gt;</b> - –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É –±–æ—Ç–∞ (–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: en).\n"
            "<b>/help</b> - –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
        ),
        "setgame_usage": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –≥—Ä–∏. –§–æ—Ä–º–∞—Ç: /setgame <Game_ID>",
        "setgame_fail_fetch": "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è ID {game_id}.",
        "setgame_fail_connect": "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞: {error}",
        "setgame_success": (
            "‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n<b>ID:</b> {game_id}\n<b>–ù–∞—Ü—ñ—ó:</b> {nations_list}\n"
            "–Ü–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {interval}—Å"
        ),
        "setgame_no_humans": "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≥—Ä–∞–≤—Ü—ñ–≤-–ª—é–¥–µ–π.",
        "setinterval_usage": "–í–∫–∞–∂—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª —É —Å–µ–∫—É–Ω–¥–∞—Ö. –ü—Ä–∏–∫–ª–∞–¥: /setinterval 120",
        "setinterval_success": "–Ü–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {interval} —Å–µ–∫—É–Ω–¥.",
        "subscribe_usage": "–§–æ—Ä–º–∞—Ç: /subscribe <–ù–∞—Ü—ñ—è> @username",
        "subscribe_username_format": "Username –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ @.",
        "subscribe_nation_not_found": "–ù–∞—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –≥—Ä—ñ. –í–∏–∫–æ–Ω–∞–π—Ç–µ /setgame, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫.",
        "subscribe_success": "‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞: {nation} -> {username}",
        "unsubscribe_usage": "–í–∫–∞–∂—ñ—Ç—å @username –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏. –§–æ—Ä–º–∞—Ç: /unsubscribe @username",
        "unsubscribe_success": "‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞: {username} (–ù–∞—Ü—ñ—è: {nation})",
        "unsubscribe_not_found": "–õ–æ–≥—ñ–Ω {username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –ø—ñ–¥–ø–∏—Å–∫–∞—Ö.",
        "pause_on": "‚è∏Ô∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ.",
        "pause_off": "‚ñ∂Ô∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ!",
        "pause_resumed_ping": " {login}, –≤–∞—à —Ö—ñ–¥ (–ù–∞—Ü—ñ—è {nation}).",
        "pause_resumed_no_ping": " –•—ñ–¥ –Ω–∞—Ü—ñ—ó {nation} –¥–æ—Å—ñ –æ—á—ñ–∫—É—î.",
        "status_no_game": "‚ùó –ù–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—ó –≥—Ä–∏. –í–∏–∫–æ–Ω–∞–π—Ç–µ /setgame <Game_ID>.",
        "status_text": "<b>–°—Ç–∞—Ç—É—Å</b>\n<b>Game ID:</b> {game_id}\n<b>–ü–∞—É–∑–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å:</b> {paused}\n",
        "status_paused_yes": "–¢–∞–∫",
        "status_paused_no": "–ù—ñ",
        "status_current_player": "<b>–û—Å—Ç–∞–Ω–Ω—ñ–π/–ø–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å:</b> {nation} ({login})\n",
        "status_login_none": "(–Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–æ)",
        "status_unknown_player": "<b>–û—Å—Ç–∞–Ω–Ω—ñ–π/–ø–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å:</b> –Ω–µ–≤—ñ–¥–æ–º–æ\n",
        "list_empty": "–ü—ñ–¥–ø–∏—Å–æ–∫ –Ω–µ–º–∞—î.",
        "list_title": "<b>–ü—ñ–¥–ø–∏—Å–∫–∏:</b>",
        "setlang_usage": "–í–∫–∞–∂—ñ—Ç—å –º–æ–≤—É: /setlang en –∞–±–æ /setlang ua",
        "setlang_success": "‚úÖ –ú–æ–≤—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {lang_name} ({lang_code}).",
        "setlang_name_en": "–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞",
        "setlang_name_ua": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "notify_main_ping": "üö® <b>{nation}</b>. –í–∞—à —Ö—ñ–¥, {login}!",
        "notify_main_no_ping": "üö® <b>–ù–û–í–ò–ô –•–Ü–î!</b> –ù–∞—Ü—ñ—è <b>{nation}</b>!",
        "notify_reminder_ping": "üîî <b>–ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø!</b> {login}, –∑—Ä–æ–±—ñ—Ç—å —Å–≤—ñ–π —Ö—ñ–¥. (–ü—Ä–æ–π—à–ª–æ: {delay})",
        "notify_reminder_no_ping": "üîî <b>–ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø!</b> –•—ñ–¥ –Ω–∞—Ü—ñ—ó <b>{nation}</b> –¥–æ—Å—ñ –æ—á—ñ–∫—É—î. (–ü—Ä–æ–π—à–ª–æ: {delay})",
        "error_server_down": "‚ö†Ô∏è –ù–µ –º–æ–∂—É –¥—ñ—Å—Ç–∞—Ç–∏—Å—è —Å–µ—Ä–≤–µ—Ä–∞ –≥—Ä–∏. –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤–æ.",
    }
}

def _(key: str, **kwargs) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ –∑–∞ –∫–ª—é—á–µ–º —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –π–æ–≥–æ."""
    lang_data = TRANSLATIONS.get(BOT_LANGUAGE, TRANSLATIONS['en'])
    text = lang_data.get(key, TRANSLATIONS['en'].get(key, f"Translation missing for {key} in {BOT_LANGUAGE}"))
    return text.format(**kwargs)

# ---------------------------
# –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ —Å—Ç–∞–Ω–æ–º (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
# ---------------------------
async def atomic_write_json(path: str, data: dict):
    """–ê—Ç–æ–º–∞—Ä–Ω–∏–π –∑–∞–ø–∏—Å JSON —É —Ñ–∞–π–ª (—á–µ—Ä–µ–∑ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª)."""
    tmp_fd, tmp_path = tempfile.mkstemp(prefix="state_", suffix=".json")
    try:
        with os.fdopen(tmp_fd, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4, default=str)
            f.flush()
            os.fsync(f.fileno())
        os.replace(tmp_path, path)
    finally:
        if os.path.exists(tmp_path):
            try:
                os.remove(tmp_path)
            except Exception:
                pass

async def save_state():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∞–Ω —É —Ñ–∞–π–ª (–ø–æ–¥ mutex)."""
    global GAME_ID, CURRENT_GAME_URL, MAIN_CHAT_ID, PLAYER_LOGINS, LAST_TURN_PLAYER, BOT_LANGUAGE, MONITOR_INTERVAL_SECONDS_DEFAULT
    async with state_lock:
        payload = {
            "GAME_ID": GAME_ID,
            "CURRENT_GAME_URL": CURRENT_GAME_URL,
            "MAIN_CHAT_ID": MAIN_CHAT_ID,
            "PLAYER_LOGINS": PLAYER_LOGINS,
            "LAST_TURN_PLAYER": LAST_TURN_PLAYER,
            "BOT_LANGUAGE": BOT_LANGUAGE, 
            "MONITOR_INTERVAL": MONITOR_INTERVAL_SECONDS_DEFAULT, # <-- –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –Ü–ù–¢–ï–†–í–ê–õ
        }
        try:
            await atomic_write_json(STATE_FILE, payload)
            logger.debug("State saved.")
        except Exception as e:
            logger.exception("Failed to save state: %s", e)

async def load_state():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ç–∞–Ω –∑ —Ñ–∞–π–ª—É (–ø–æ–º'—è–∫—à–µ–Ω–æ)."""
    global GAME_ID, CURRENT_GAME_URL, MAIN_CHAT_ID, PLAYER_LOGINS, LAST_TURN_PLAYER, BOT_LANGUAGE, MONITOR_INTERVAL_SECONDS_DEFAULT
    if not os.path.exists(STATE_FILE):
        logger.info("State file not found; starting fresh.")
        return False
    async with state_lock:
        try:
            with open(STATE_FILE, 'r', encoding='utf-8') as f:
                payload = json.load(f)
            GAME_ID = payload.get("GAME_ID")
            CURRENT_GAME_URL = payload.get("CURRENT_GAME_URL")
            MAIN_CHAT_ID = payload.get("MAIN_CHAT_ID")
            PLAYER_LOGINS = payload.get("PLAYER_LOGINS", {})
            LAST_TURN_PLAYER = payload.get("LAST_TURN_PLAYER")
            BOT_LANGUAGE = payload.get("BOT_LANGUAGE", "en")
            # <-- –í–Ü–î–ù–û–í–õ–Æ–Ñ–ú–û –Ü–ù–¢–ï–†–í–ê–õ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 60 —è–∫ –¥–µ—Ñ–æ–ª—Ç, —è–∫—â–æ —É —Ñ–∞–π–ª—ñ –Ω–µ–º–∞—î
            MONITOR_INTERVAL_SECONDS_DEFAULT = payload.get("MONITOR_INTERVAL", 60)
            logger.info("State loaded from file. GAME_ID=%s, Lang=%s, Interval=%s", GAME_ID, BOT_LANGUAGE, MONITOR_INTERVAL_SECONDS_DEFAULT)
            return True
        except Exception as e:
            logger.exception("Failed to load state: %s", e)
            return False

def normalize(n: Optional[str]) -> Optional[str]:
    return n.upper() if n else n

def get_raw_nation_name(normalized_name: str) -> str:
    return next((n for n in AVAILABLE_NATIONS if n.upper() == normalized_name), normalized_name)

# ---------------------------
# HTTP: async fetch –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é ETag
# ---------------------------
async def fetch_game_json(session: aiohttp.ClientSession, url: str, timeout: int = 10) -> Optional[dict]:
    headers = {}
    etag = ETAG_CACHE.get(url)
    if etag:
        headers['If-None-Match'] = etag

    try:
        async with session.get(url, headers=headers, timeout=timeout) as resp:
            if resp.status == 304:
                return {"_not_modified": True}
            resp.raise_for_status()
            etag_new = resp.headers.get('ETag') or resp.headers.get('etag')
            if etag_new:
                ETAG_CACHE[url] = etag_new
            data = await resp.json()
            return data
    except asyncio.TimeoutError:
        logger.warning("Timeout fetching %s", url)
        raise
    except ClientError as e:
        logger.warning("ClientError fetching %s: %s", url, e)
        raise

# ---------------------------
# Telegram command handlers
# ---------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAIN_CHAT_ID
    if update.effective_chat:
        MAIN_CHAT_ID = update.effective_chat.id
        await save_state()
    await update.message.reply_html(_("welcome"))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(_("help_text"), parse_mode=ParseMode.HTML)

async def set_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î ID –≥—Ä–∏ —ñ —Å—Ç–∞—Ä—Ç—É—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ (–∞–±–æ –æ–Ω–æ–≤–ª—é—î URL)."""
    global GAME_ID, CURRENT_GAME_URL, AVAILABLE_NATIONS, LAST_TURN_PLAYER, PLAYER_NOTIFICATION_STATE, MAIN_CHAT_ID, PLAYER_LOGINS

    if update.effective_chat:
        MAIN_CHAT_ID = update.effective_chat.id

    if not context.args:
        await update.message.reply_text(_("setgame_usage"))
        return

    new_game_id = context.args[0].strip()
    new_game_url = f"{BASE_URL}{new_game_id}"

    async with aiohttp.ClientSession() as session:
        try:
            data = await fetch_game_json(session, new_game_url)
            if data is None or data.get("_not_modified"):
                await update.message.reply_text(_("setgame_fail_fetch", game_id=new_game_id))
                return
        except Exception as e:
            await update.message.reply_text(_("setgame_fail_connect", error=e))
            return

    # --- –§–Ü–ù–ê–õ–¨–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ë–µ–∑—É–º–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–∏ /setgame ---
    
    # 1. –û—á–∏—â—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∫–∏ —Ç–∞ —Å—Ç–∞—Ä–∏–π —Å—Ç–∞–Ω —É –ø–∞–º'—è—Ç—ñ.
    PLAYER_LOGINS.clear()             
    PLAYER_NOTIFICATION_STATE.clear() 
    AVAILABLE_NATIONS.clear()
    LAST_TURN_PLAYER = None
    logger.info("Unconditionally cleared PLAYER_LOGINS and previous game state in memory on /setgame.") 
    
    # 2. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π ID
    GAME_ID = new_game_id
    CURRENT_GAME_URL = new_game_url
    # -------------------------------------------------------------------

    try:
        civs = data.get('civilizations', []) if isinstance(data, dict) else []
        human_civs = [c.get('civName') for c in civs if c.get('playerType') == 'Human']
        AVAILABLE_NATIONS = [n for n in human_civs if n]
    except Exception:
        AVAILABLE_NATIONS = []

    await save_state() # <-- –ê–°–ò–ù–•–†–û–ù–ù–ï –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ü–£–°–¢–û–ì–û –°–õ–û–í–ù–ò–ö–ê LOGINS –í .JSON

    nations_list = ", ".join(AVAILABLE_NATIONS) if AVAILABLE_NATIONS else _("setgame_no_humans")
    
    current_interval = MONITOR_INTERVAL_SECONDS_DEFAULT

    await update.message.reply_html(
        _("setgame_success", game_id=GAME_ID, nations_list=nations_list, interval=current_interval)
    )

    logger.info("Set game to %s. Human nations: %s", GAME_ID, ", ".join(AVAILABLE_NATIONS))

async def set_interval_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–∑–≤–æ–ª—è—î –ø–æ–º—ñ–Ω—è—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —ñ –∑–±–µ—Ä—ñ–≥–∞—î —Ü–µ."""
    global MONITOR_INTERVAL_SECONDS_DEFAULT
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(_("setinterval_usage"))
        return
    new_interval = int(context.args[0])
    MONITOR_INTERVAL_SECONDS_DEFAULT = new_interval

    jobs = context.job_queue.get_jobs_by_name('monitor_job')
    if jobs:
        for j in jobs:
            j.schedule_removal()
    
    context.job_queue.run_repeating(monitor_game_state, interval=new_interval, first=1, name='monitor_job')
    
    await save_state() # <-- –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –ù–û–í–ò–ô –Ü–ù–¢–ï–†–í–ê–õ –£ –§–ê–ô–õ –°–¢–ê–ù–£
    
    await update.message.reply_text(_("setinterval_success", interval=new_interval))

async def set_language_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –º–æ–≤—É –±–æ—Ç–∞."""
    global BOT_LANGUAGE

    if not context.args or context.args[0].lower() not in ['en', 'ua']:
        await update.message.reply_text(_("setlang_usage"))
        return
    
    new_lang = context.args[0].lower()
    BOT_LANGUAGE = new_lang
    await save_state()
    
    lang_name_key = f"setlang_name_{new_lang}"
    lang_name = _(lang_name_key)

    await update.message.reply_text(_("setlang_success", lang_name=lang_name, lang_code=new_lang))

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—ñ–Ω–≥ –¥–ª—è –Ω–∞—Ü—ñ—ó."""
    global PLAYER_LOGINS, MAIN_CHAT_ID, AVAILABLE_NATIONS
    if update.effective_chat:
        MAIN_CHAT_ID = update.effective_chat.id

    if len(context.args) < 2:
        await update.message.reply_text(_("subscribe_usage"))
        return
    username_raw = context.args[-1]
    nation_input = " ".join(context.args[:-1]).strip()

    if not username_raw.startswith("@"):
        await update.message.reply_text(_("subscribe_username_format"))
        return

    # --- –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—à—É–∫ –ø—ñ–¥—Ä—è–¥–∫–∞ –¥–ª—è –±—ñ–ª—å—à –≥–Ω—É—á–∫–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è ---
    nation_input_upper = nation_input.upper()
    found = next(
        (n for n in AVAILABLE_NATIONS if nation_input_upper in n.upper()), 
        None
    )
    # ---------------------------------------------------------------------------------
    
    if not found:
        await update.message.reply_text(_("subscribe_nation_not_found"))
        return

    norm = normalize(found)
    PLAYER_LOGINS[norm] = username_raw
    await save_state()
    await update.message.reply_text(_("subscribe_success", nation=found, username=username_raw))

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global PLAYER_LOGINS
    if not context.args or not context.args[0].startswith("@"):
        await update.message.reply_text(_("unsubscribe_usage"))
        return
    username = context.args[0]
    found_key = next((k for k, v in PLAYER_LOGINS.items() if v == username), None)
    if found_key:
        raw_name = get_raw_nation_name(found_key)
        del PLAYER_LOGINS[found_key]
        await save_state()
        await update.message.reply_text(_("unsubscribe_success", username=username, nation=raw_name))
    else:
        await update.message.reply_text(_("unsubscribe_not_found", username=username))

async def pause_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞—î –ø–∞—É–∑—É."""
    global NOTIFY_PAUSED, LAST_TURN_PLAYER, PLAYER_NOTIFICATION_STATE
    NOTIFY_PAUSED_BEFORE = NOTIFY_PAUSED
    NOTIFY_PAUSED = not NOTIFY_PAUSED
    
    if NOTIFY_PAUSED:
        await update.message.reply_text(_("pause_on"))
    else:
        msg = _("pause_off")
        if LAST_TURN_PLAYER and NOTIFY_PAUSED_BEFORE:
            raw = get_raw_nation_name(LAST_TURN_PLAYER)
            login = PLAYER_LOGINS.get(LAST_TURN_PLAYER)
            if login:
                msg += _("pause_resumed_ping", login=login, nation=raw)
            else:
                msg += _("pause_resumed_no_ping", nation=raw)
            
            # —Å–∫–∏–Ω—É—Ç–∏ —Ç–∞–π–º–µ—Ä–∏
            PLAYER_NOTIFICATION_STATE[LAST_TURN_PLAYER] = {
                'last_turn_change_time': datetime.now().isoformat(),
                'next_reminder_index': 0,
                'last_reminded_time': datetime.now().isoformat(),
            }
        await update.message.reply_text(msg)
    await save_state()

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞/–≥—Ä–∏."""
    global GAME_ID, LAST_TURN_PLAYER, NOTIFY_PAUSED, PLAYER_LOGINS
    if not GAME_ID:
        await update.message.reply_text(_("status_no_game"))
        return
    
    paused_text = _("status_paused_yes") if NOTIFY_PAUSED else _("status_paused_no")
    s = _("status_text", game_id=GAME_ID, paused=paused_text)

    if LAST_TURN_PLAYER:
        raw = get_raw_nation_name(LAST_TURN_PLAYER)
        login = PLAYER_LOGINS.get(LAST_TURN_PLAYER)
        login_text = login if login else _("status_login_none")
        s += _("status_current_player", nation=raw, login=login_text)
    else:
        s += _("status_unknown_player")
        
    await update.message.reply_text(s, parse_mode=ParseMode.HTML)

async def list_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∫–∏."""
    if not PLAYER_LOGINS:
        await update.message.reply_text(_("list_empty"))
        return
    lines = [_("list_title")]
    for norm, username in PLAYER_LOGINS.items():
        raw = get_raw_nation_name(norm)
        lines.append(f"{raw} -> {username}")
    await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

# ---------------------------
# –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≥—Ä–∏ (JobQueue)
# ---------------------------
async def send_debounced_error(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message: str):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, –∞–ª–µ –Ω–µ —á–∞—Å—Ç—ñ—à–µ –Ω—ñ–∂ ERROR_DEBOUNCE_SECONDS."""
    now = time.time()
    last = _last_error_time_by_chat.get(chat_id, 0)
    if now - last >= ERROR_DEBOUNCE_SECONDS:
        try:
            await context.bot.send_message(chat_id=chat_id, text=message)
            _last_error_time_by_chat[chat_id] = now
        except Exception as e:
            logger.exception("Failed to send error message to chat %s: %s", chat_id, e)

async def monitor_game_state(context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏, –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å."""
    global CURRENT_GAME_URL, LAST_TURN_PLAYER, PLAYER_NOTIFICATION_STATE, MAIN_CHAT_ID, NOTIFY_PAUSED, PLAYER_LOGINS

    if not CURRENT_GAME_URL:
        return

    async with aiohttp.ClientSession() as session:
        try:
            data = await fetch_game_json(session, CURRENT_GAME_URL)
        except Exception:
            logger.warning("Fetch game failed.")
            if MAIN_CHAT_ID:
                await send_debounced_error(context, MAIN_CHAT_ID, _("error_server_down"))
            return

        if isinstance(data, dict) and data.get("_not_modified"):
            current_player_raw = LAST_TURN_PLAYER
            if not current_player_raw:
                return
        else:
            current_player_raw = data.get("currentPlayer") if isinstance(data, dict) else None

        if not current_player_raw:
            logger.info("No currentPlayer found in game JSON; skipping.")
            return

        current_norm = normalize(current_player_raw)

        # --- –ù–û–í–ï: –û–±—á–∏—Å–ª—é—î–º–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É —Ö–æ–¥—É –∑ JSON (currentTurnStartTime) ---
        current_turn_start_ms = data.get("currentTurnStartTime")
        current_turn_time = datetime.now() # Fallback, —è–∫—â–æ –ø–æ–ª–µ –≤—ñ–¥—Å—É—Ç–Ω—î
        if current_turn_start_ms and isinstance(current_turn_start_ms, (int, float)):
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏ –≤ —Å–µ–∫—É–Ω–¥–∏
                current_turn_time = datetime.fromtimestamp(current_turn_start_ms / 1000)
            except ValueError:
                logger.error("Invalid currentTurnStartTime value: %s", current_turn_start_ms)
        
        turn_start_time_iso = current_turn_time.isoformat()
        # ------------------------------------------------------------------------

        if LAST_TURN_PLAYER is None:
            LAST_TURN_PLAYER = current_norm
            
            # --- –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —á–∞—Å –∑ JSON ---
            PLAYER_NOTIFICATION_STATE[current_norm] = {
                'last_turn_change_time': turn_start_time_iso, # <-- –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ß–ê–° –ó –ì–†–ò
                'next_reminder_index': 0,
                'last_reminded_time': turn_start_time_iso,    # <-- –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ß–ê–° –ó –ì–†–ò
            }
            # -----------------------------------------------------------------------
            
            try:
                civs = data.get('civilizations', []) if isinstance(data, dict) else []
                human_civs = [c.get('civName') for c in civs if c.get('playerType') == 'Human']
                if human_civs:
                    AVAILABLE_NATIONS.clear()
                    AVAILABLE_NATIONS.extend([n for n in human_civs if n])
            except Exception:
                pass
            
            await save_state() # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Å—Ç–∞–Ω
            
            logger.info("Initial last player set to %s. Reminder state initialized.", LAST_TURN_PLAYER)
            return

        if current_norm != LAST_TURN_PLAYER:
            logger.info("Turn changed: %s -> %s", LAST_TURN_PLAYER, current_norm)
            LAST_TURN_PLAYER = current_norm
            
            player_login = PLAYER_LOGINS.get(current_norm)
            raw_name = current_player_raw
            if MAIN_CHAT_ID and not NOTIFY_PAUSED:
                if player_login:
                    text = _("notify_main_ping", nation=raw_name, login=player_login)
                else:
                    text = _("notify_main_no_ping", nation=raw_name)
                try:
                    await context.bot.send_message(chat_id=MAIN_CHAT_ID, text=text, parse_mode=ParseMode.HTML)
                except Exception as e:
                    logger.exception("Failed to send main notification: %s", e)

            PLAYER_NOTIFICATION_STATE[current_norm] = {
                'last_turn_change_time': turn_start_time_iso, # <-- –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ß–ê–° –ó –ì–†–ò
                'next_reminder_index': 0,
                'last_reminded_time': turn_start_time_iso,    # <-- –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ß–ê–° –ó –ì–†–ò
            }
            await save_state()
            return

        if current_norm in PLAYER_NOTIFICATION_STATE and MAIN_CHAT_ID and not NOTIFY_PAUSED:
            st = PLAYER_NOTIFICATION_STATE[current_norm]
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –æ–±'—î–∫—Ç datetime —á–∏ —Ä—è–¥–æ–∫
            last_reminded_raw = st.get('last_reminded_time')
            if isinstance(last_reminded_raw, str):
                 last_reminded = datetime.fromisoformat(last_reminded_raw)
            else:
                 # –Ø–∫—â–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–ª–æ—Å—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –∞–±–æ —Ü–µ –ø–µ—Ä—à–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–µ–∑ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
                 last_reminded = datetime.now()
                 st['last_reminded_time'] = last_reminded.isoformat() # –§—ñ–∫—Å—É—î–º–æ –π–æ–≥–æ
                 
            idx = st.get('next_reminder_index', 0)
            if idx < len(REMINDER_SCHEDULE):
                target = last_reminded + REMINDER_SCHEDULE[idx]
                if datetime.now() >= target:
                    
                    login = PLAYER_LOGINS.get(current_norm)
                    delay_str = str(REMINDER_SCHEDULE[idx])
                    
                    if login:
                        msg = _("notify_reminder_ping", login=login, delay=delay_str)
                    else:
                        raw_name = get_raw_nation_name(current_norm)
                        msg = _("notify_reminder_no_ping", nation=raw_name, delay=delay_str)
                        
                    try:
                        await context.bot.send_message(chat_id=MAIN_CHAT_ID, text=msg, parse_mode=ParseMode.HTML)
                        logger.info("Reminder sent for %s (idx=%s)", current_norm, idx)
                    except Exception:
                        logger.exception("Failed to send reminder")
                        
                    st['last_reminded_time'] = datetime.now().isoformat()
                    st['next_reminder_index'] = idx + 1
                    await save_state()
            else:
                logger.debug("Reminders exhausted for %s", current_norm)

# ---------------------------
# Boot / main
# ---------------------------
def build_app():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("setgame", set_game))
    application.add_handler(CommandHandler("setinterval", set_interval_cmd))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))
    application.add_handler(CommandHandler("pause", pause_notifications))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("list", list_subscriptions))
    application.add_handler(CommandHandler("setlang", set_language_cmd))
    return application

async def async_main_setup():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞, —â–æ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è."""
    await load_state()

def main():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, —è–∫–∏–π —É–Ω–∏–∫–∞—î –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ —Ü–∏–∫–ª—É –ø–æ–¥—ñ–π."""
    try:
        asyncio.run(async_main_setup())
    except RuntimeError as e:
        # –¶—è –ø–æ–º–∏–ª–∫–∞ –º–æ–∂–µ –≤–∏–Ω–∏–∫–∞—Ç–∏, —è–∫—â–æ —Ü–∏–∫–ª –ø–æ–¥—ñ–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —É –¥–µ—è–∫–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞—Ö IDE)
        if "already running" in str(e):
             logger.warning(f"Async setup via asyncio.run failed: Event loop already running. Proceeding with existing loop.")
             # –Ø–∫—â–æ —Ü–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ load_state
             try:
                 # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ü–∏–∫–ª —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ load_state
                 loop = asyncio.get_event_loop()
                 loop.run_until_complete(load_state())
             except Exception:
                 logger.exception("Fallback load_state failed.")
        else:
            logger.exception(f"Async setup failed: {e}")
    except Exception as e:
        logger.exception(f"Async setup failed: {e}")

    app = build_app()

    # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –±–µ—Ä–µ—Ç—å—Å—è –∑ —â–æ–π–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
    interval = MONITOR_INTERVAL_SECONDS_DEFAULT 
    if app.job_queue:
        app.job_queue.run_repeating(monitor_game_state, interval=interval, first=3, name='monitor_job')
    logger.info("Bot starting. Monitoring interval: %s", interval)

    # –ó–∞–ø—É—Å–∫ polling (–°–ò–ù–•–†–û–ù–ù–ò–ô, –±–ª–æ–∫—É—é—á–∏–π –º–µ—Ç–æ–¥)
    app.run_polling(poll_interval=1)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("Shutting down (keyboard interrupt).")
    except Exception:
        logger.exception("An unhandled exception occurred during bot execution.")
